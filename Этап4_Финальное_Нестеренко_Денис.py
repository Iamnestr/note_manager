# 1. Сохранение заметок в файл
# Файл: Этап4_Сохранение_Заметок_Фамилия_Имя.py
# Описание задачи:
# Создать функцию save_notes_to_file(notes, filename), которая:
# Перезаписывает данные файла, записывая список заметок в текстовом формате YAML.
# Формат записи каждой заметки:
# yaml
# Копировать код
# Имя пользователя: {username}
# Заголовок: {title}
# Описание: {content}
# Статус: {status}
# Дата создания: {created_date}
# Дедлайн: {issue_date}
#
# Критерии:
# Файл создаётся, если его не существует.
# Все заметки записаны корректно.
# Данные файла перезаписываются при каждом вызове функции.
# Пример:
# python
# Копировать код
# notes = [
#     {
#         "username": "Алексей",
#         "title": "Список покупок",
#         "content": "Купить продукты",
#         "status": "новая",
#         "created_date": "27-11-2024",
#         "issue_date": "30-11-2024"
#     }
# ]
# save_notes_to_file(notes, "notes.txt")
#
# 2. Загрузка заметок из файла
# Файл: Этап4_Загрузка_Заметок_Фамилия_Имя.py
# Описание задачи:
# Создать функцию load_notes_from_file(filename), которая:
# Читает заметки из текстового файла в формате YAML.
# Преобразует данные в список словарей.
# Критерии:
# Возвращает список словарей.
# Обрабатывает отсутствие файла: создаёт пустой файл и сообщает пользователю.
# Работает корректно даже с пустым файлом.
# Пример:
# python
# Копировать код
# notes = load_notes_from_file("notes.txt")
# print(notes)
# [{'username': 'Алексей', 'title': 'Список покупок', ...}]
#
# 3. Обработка ошибок при работе с файлами
# Файл: Этап4_Обработка_Ошибок_Фамилия_Имя.py
# Описание задачи:
# Добавить обработку ошибок в функции работы с файлами:
# Если файл отсутствует:
# Создать новый файл.
# Вывести сообщение:
# python
# Копировать код
# Файл filename не найден. Создан новый файл.
# Если файл повреждён или данные некорректны:
# Вывести сообщение:
# python
# Копировать код
# Ошибка при чтении файла filename. Проверьте его содержимое.
# Если возникают другие ошибки (например, отсутствие прав):
# Вывести подробное сообщение об ошибке.
# Корректно завершить выполнение программы.
# Пример обработки ошибок:
# python
# Копировать код
# try:
#     notes = load_notes_from_file("corrupted_file.txt")
# except Exception as e:
#     print(f"Ошибка: {e}")
#
# 4. Добавление данных в файл
# Файл: Этап4_Добавление_Данных_Фамилия_Имя.py
# Описание задачи:
# Создать функцию append_notes_to_file(notes, filename), которая:
# Добавляет новые заметки в существующий файл, сохраняя старые данные.
# Формат записи аналогичен save_notes_to_file, но файл открывается в режиме добавления.
# Критерии:
# Новые заметки добавляются в конец файла.
# Старые данные остаются неизменными.
# Файл создаётся автоматически, если он не существует.
# Пример:
# python
# Копировать код
# new_notes = [
#     {
#         "username": "Мария",
#         "title": "План работы",
#         "content": "Подготовить отчёт",
#         "status": "в процессе",
#         "created_date": "27-11-2024",
#         "issue_date": "28-11-2024"
#     }
# ]
# append_notes_to_file(new_notes, "notes.txt")
#
# 5. Выбор формата файла
# Файл: Этап4_JSON_Формат_Фамилия_Имя.py
# Описание задачи:
# Создать функцию save_notes_json(notes, filename), которая:
# Сохраняет список заметок в формате JSON.
# Записывает данные с отступами (indent=4) для удобства чтения.
# Критерии:
# Данные сохраняются в формате JSON.
# Файл создаётся автоматически, если его не существует.
# Форматирование сохраняется.
# Пример:
# python
# Копировать код
# save_notes_json(notes, "notes.json")
# Содержимое файла:
# json
# Копировать код
# [
#     {
#         "username": "Алексей",
#         "title": "Список покупок",
#         "content": "Купить продукты",
#         "status": "новая",
#         "created_date": "27-11-2024",
#         "issue_date": "30-11-2024"
#     }
# ]