# 1. create_note_function.py: Функция создания заметки
## Функциональность:
# Функция create_note() запрашивает данные у пользователя для создания заметки.
# Формирует словарь с полями заметки, включая автоматическую генерацию текущей даты.
# Проверяет корректность формата даты дедлайна.
# Пример вызова:
# python
# Копировать код
# note = create_note()
# print("Созданная заметка:", note)
#
# 2. update_note_function.py: Функция обновления заметки
## Функциональность:
# Функция update_note(note) принимает заметку (словарь) как аргумент.
# Позволяет пользователю выбрать поле для обновления.
# Проверяет корректность ввода и обновляет выбранное поле.
# Пример вызова:
# python
# Копировать код
# note = {
#     'username': 'Алексей',
#     'title': 'Список покупок',
#     'content': 'Купить продукты',
#     'status': 'новая',
#     'created_date': '27-11-2024',
#     'issue_date': '30-11-2024'
# }
## updated_note = update_note(note)
## print("Обновлённая заметка:", updated_note)
##
# 3. display_notes_function.py: Функция отображения заметок
## Функциональность:
# Функция display_notes(notes) принимает список заметок.
# Выводит каждую заметку в удобном формате.
# Обрабатывает пустые списки заметок.
# Пример вызова:
# python
# Копировать код
# notes = [
#     {'username': 'Алексей', 'title': 'Список покупок', 'content': 'Купить продукты', 'status': 'новая', 'created_date': '27-11-2024', 'issue_date': '30-11-2024'}
# ]
## display_notes(notes)
#
#
# 4. search_notes_function.py: Функция поиска заметок
## Функциональность:
# Функция search_notes(notes, keyword=None, status=None) ищет заметки по ключевым словам или статусу.
# Возвращает список найденных заметок.
# Выводит сообщение, если ничего не найдено.
# Пример вызова:
# python
# Копировать код
# notes = [
#     {'username': 'Алексей', 'title': 'Список покупок', 'content': 'Купить продукты', 'status': 'новая', 'created_date': '27-11-2024', 'issue_date': '30-11-2024'}
# ]
# found_notes = search_notes(notes, keyword='покупок')
# display_notes(found_notes)
#
#
# 5. menu.py: Меню действий
# Функциональность:
# Выводит интерактивное меню для выбора действий.
# Обрабатывает выбор пользователя и вызывает соответствующую функцию.
# Повторяет показ меню до тех пор, пока пользователь не выберет выход.
# Доступные действия:
# 1: Создать новую заметку (create_note()).
# 2: Показать все заметки (display_notes()).
# 3: Обновить заметку (update_note()).
# 4: Удалить заметку (delete_note() — опционально).
# 5: Найти заметки (search_notes()).
# 6: Выйти из программы.
# Пример работы:
# python
# Копировать код
# if __name__ == "__main__":
#     notes = []
#     while True:
#         print("""
#         Меню действий:
#         1. Создать новую заметку
#         2. Показать все заметки
#         3. Обновить заметку
#         4. Удалить заметку
#         5. Найти заметки
#         6. Выйти из программы
#         """)
#
#         choice = input("Ваш выбор: ")
#         if choice == "1":
#             note = create_note()
#             notes.append(note)
#         elif choice == "2":
#             display_notes(notes)
#         elif choice == "3":
#             if notes:
#                 display_notes(notes)
#                 index = int(input("Введите номер заметки для обновления: ")) - 1
#                 if 0 <= index < len(notes):
#                     notes[index] = update_note(notes[index])
#                 else:
#                     print("Неверный номер заметки.")
#             else:
#                 print("Список заметок пуст.")
#         elif choice == "4":
#             # Реализуйте функцию удаления заметки
#             pass
#         elif choice == "5":
#             keyword = input("Введите ключевое слово для поиска: ")
#             status = input("Введите статус для поиска (или оставьте пустым): ")
#             found_notes = search_notes(notes, keyword, status)
#             display_notes(found_notes)
#         elif choice == "6":
#             print("Программа завершена. Спасибо за использование!")
#             break
#         else:
#             print("Неверный выбор. Попробуйте снова.")
#
